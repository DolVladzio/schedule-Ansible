name: "App Deploy"

on:
  workflow_dispatch:
  repository_dispatch:
    types: [ deploy-app, deploy-frontend, deploy-backend ]

jobs:
  ansible:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_KEY  }}'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Clone another repo
        run: |
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/DolVladzio/schedule-config.git ../schedule-config

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          pip install kubernetes
          ansible-galaxy collection install community.kubernetes
          ansible-galaxy collection install community.general
          gcloud components install gke-gcloud-auth-plugin

      - name: Getting access to the prod GKE Cluster
        if: ${{ github.event.client_payload.env }} == 'prod'
        run: |
          gcloud container clusters get-credentials ${{ secrets.PROD_GCP_CLUSTER_NAME }} --zone ${{ secrets.GCP_CLUSTER_REGION }}-a --project ${{ secrets.GCP_PROJECT_ID }}    

      - name: Getting access to the dev GKE Cluster
        if: ${{ github.event.client_payload.env }} == 'dev'
        run: |
          gcloud container clusters get-credentials ${{ secrets.DEV_GCP_CLUSTER_NAME }} --zone ${{ secrets.GCP_CLUSTER_REGION }}-a --project ${{ secrets.GCP_PROJECT_ID }}         

      - name: Copy the inventory.ini from the GCP bucket
        run: gsutil cp gs://${{ secrets.ANSBILE_BUCKET_NAME }}/inventory.ini inventory/inventory.ini
      
      - name: Set frontend image to payload value
        if: github.event.action == 'deploy-frontend'
        run: |
          echo "FRONTEND_IMAGE=${{ github.event.client_payload.frontend_image }}" >> $GITHUB_ENV

      - name: "Fallback: set frontend image to current cluster value"
        if: github.event.action != 'deploy-frontend'
        run: |
          CURRENT=$(kubectl get deployment frontend -n "${{ secrets.K8S_NAMESPACE_NAME }}" -o jsonpath='{.spec.template.spec.containers[0].image}')
          if [ -z "$CURRENT" ]; then
            echo "Could not fetch current frontend image!" >&2
            exit 1
          fi
          echo "FRONTEND_IMAGE=$CURRENT" >> $GITHUB_ENV
      
      - name: Set backend image to payload value
        if: github.event.action == 'deploy-backend'
        run: |
          echo "BACKEND_IMAGE=${{ github.event.client_payload.backend_image }}" >> $GITHUB_ENV

      - name: "Fallback: set backend image to current cluster value"
        if: github.event.action != 'deploy-backend'
        run: |
          CURRENT=$(kubectl get deployment backend -n "${{ secrets.K8S_NAMESPACE_NAME }}" -o jsonpath='{.spec.template.spec.containers[0].image}')
          if [ -z "$CURRENT" ]; then
            echo "Could not fetch current backend image!" >&2
            exit 1
          fi
          echo "BACKEND_IMAGE=$CURRENT" >> $GITHUB_ENV
      
      - name: Run the ansible playbook
        run: |
          ansible-playbook ingress_deploy.yml
          ansible-playbook app_deploy.yml \
            -e "frontend_image=${{ env.FRONTEND_IMAGE }} backend_image=${{ env.BACKEND_IMAGE }} env=${{ github.event.client_payload.env }}"